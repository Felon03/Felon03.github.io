<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FreedomLy</title>
  <subtitle>Welcome to my blog. &lt;3</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://felon03.github.io/"/>
  <updated>2017-05-28T02:12:08.872Z</updated>
  <id>https://felon03.github.io/</id>
  
  <author>
    <name>FreedomLy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【每周一坑】验证哥德巴赫猜想</title>
    <link href="https://felon03.github.io/2017/05/28/%E3%80%90%E6%AF%8F%E5%91%A8%E4%B8%80%E5%9D%91%E3%80%91%E9%AA%8C%E8%AF%81%E5%93%A5%E5%BE%B7%E5%B7%B4%E8%B5%AB%E7%8C%9C%E6%83%B3/"/>
    <id>https://felon03.github.io/2017/05/28/【每周一坑】验证哥德巴赫猜想/</id>
    <published>2017-05-28T01:53:38.000Z</published>
    <updated>2017-05-28T02:12:08.872Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/imagesource/17-05-28.jpg" alt="Goldbach&#39;s conjecture"></p>
<blockquote>
<p>哥德巴赫在1742年给欧拉的信中提出了以下猜想：任一大于2的整数都可以写成三个质数之和。（因现今数学界已经不再使用“1也是质数”这个约定，原初猜想的现在陈述为：任一大于5的整数都可以写成三个质数之和。）欧拉在回信中也提出另一个等价的版本，即任一大于2的偶数都可以写成两个质数之和。今日常见的猜想陈述为欧拉的版本。</p>
</blockquote>
<a id="more"></a>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><strong>本周题目</strong></p>
<blockquote>
<p>实现一段代码，输入一个大于2的偶数k，输出两个质数m、n，满足 m + n == k。</p>
</blockquote>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>Goldbach(<span class="number">123456</span>)</div><div class="line"><span class="number">7</span> <span class="number">123449</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Goldbach(<span class="number">12345678</span>)</div><div class="line"><span class="number">31</span> <span class="number">12345647</span></div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这个问题其实就是在求k范围内的质数的基础上，在加一个判断，使得两个质数之和等于k即可。要注意的是，求得的解并不唯一。</p>
<h2 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="comment"># 求得小于等于n的所有质数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span><span class="params">(n)</span>:</span></div><div class="line">    prime = []</div><div class="line">    prime_dic = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n+<span class="number">1</span>):</div><div class="line">        prime_dic[i] = <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(math.sqrt(n)) + <span class="number">1</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i * i, n + <span class="number">1</span>, i):</div><div class="line">            <span class="keyword">if</span> prime_dic[i] == <span class="number">1</span>:</div><div class="line">                prime_dic[j] = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> prime.items():</div><div class="line">        <span class="keyword">if</span> v == <span class="number">1</span>:</div><div class="line">            prime.append(k)</div><div class="line">    <span class="keyword">return</span> prime</div><div class="line"></div><div class="line"><span class="comment"># 求满足猜想的质数和</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gold_bach</span><span class="params">(n)</span>:</span></div><div class="line">    cnt = <span class="number">0</span></div><div class="line">    prime = get_prime(n)</div><div class="line">    <span class="keyword">for</span> prime1 <span class="keyword">in</span> prime:</div><div class="line">        prime2 = n - prime1</div><div class="line">        <span class="keyword">if</span> prime2 <span class="keyword">in</span> prime <span class="keyword">and</span> cnt != <span class="number">1</span>:    <span class="comment"># 只输出一种结果</span></div><div class="line">            cnt += <span class="number">1</span></div><div class="line">            <span class="keyword">return</span> prime1. prime2</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>：</div><div class="line">    print(gold_bach(<span class="number">123456</span>))</div><div class="line">    print(gold_bach(<span class="number">12345678</span>))</div></pre></td></tr></table></figure>
<h2 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h2><p>print(gold_bach(123456))</p>
<blockquote>
<p>(7, 123449)</p>
</blockquote>
<p>print(gold_bach(12345678))</p>
<blockquote>
<p>(31, 12345647)</p>
</blockquote>
<p>与示例一致。</p>
<p>End~</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/imagesource/17-05-28.jpg&quot; alt=&quot;Goldbach&amp;#39;s conjecture&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;哥德巴赫在1742年给欧拉的信中提出了以下猜想：任一大于2的整数都可以写成三个质数之和。（因现今数学界已经不再使用“1也是质数”这个约定，原初猜想的现在陈述为：任一大于5的整数都可以写成三个质数之和。）欧拉在回信中也提出另一个等价的版本，即任一大于2的偶数都可以写成两个质数之和。今日常见的猜想陈述为欧拉的版本。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="https://felon03.github.io/categories/Python/"/>
    
    
      <category term="每周一坑" scheme="https://felon03.github.io/tags/%E6%AF%8F%E5%91%A8%E4%B8%80%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>C++ Primer 第五版 练习12.3</title>
    <link href="https://felon03.github.io/2017/05/26/C-Primer-%E7%AC%AC%E4%BA%94%E7%89%88-%E7%BB%83%E4%B9%A012-3/"/>
    <id>https://felon03.github.io/2017/05/26/C-Primer-第五版-练习12-3/</id>
    <published>2017-05-26T06:27:11.000Z</published>
    <updated>2017-05-26T06:34:20.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>StrBlob需要const版本的<code>push_back</code>和<code>pop_back</code>吗？如果需要，添加进去。否则，解释为什么不需要。</p>
<a id="more"></a>
<h2 id="定义StrBlob类"><a href="#定义StrBlob类" class="headerlink" title="定义StrBlob类"></a>定义StrBlob类</h2><p>首先，定义<strong>StrBlob</strong>类。类的定义如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/* StrBlob.h */</span></div><div class="line"><span class="comment">/* 编写你自己的StrBlob类，包含const版本的front和back */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;initializer_list&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;exception&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>;</div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> StrBlob &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">using</span> size_type = <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::size_type;</div><div class="line">    StrBlob() : data(<span class="built_in">std</span>::make_shared&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;()) &#123;&#125;</div><div class="line">    StrBlob(<span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;<span class="built_in">string</span>&gt; il)</div><div class="line">        : data(<span class="built_in">std</span>::make_shared&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;(il)) &#123;&#125;</div><div class="line">    <span class="function">size_type <span class="title">size</span><span class="params">()</span> cosnt </span>&#123; <span class="keyword">return</span> data-&gt;size(); &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> data-&gt;empty(); &#125;</div><div class="line">    <span class="comment">// 添加和删除元素</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;t)</span> </span>&#123; data-&gt;push_back(t); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">       check(<span class="number">0</span>, <span class="string">"pop_back on empty StrBlob"</span>);</div><div class="line">       data-&gt;pop_back();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 元素访问</span></div><div class="line">    <span class="function"><span class="built_in">string</span> &amp;<span class="title">front</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 如果vector为空，check会抛出一个异常</span></div><div class="line">       check(<span class="number">0</span>, <span class="string">"front on empty StrBlob"</span>);</div><div class="line">       <span class="keyword">return</span> data-&gt;front();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">const</span> <span class="built_in">string</span> &amp;<span class="title">front</span><span class="params">()</span> <span class="keyword">const</span></span></div><div class="line">    &#123;</div><div class="line">        check(<span class="number">0</span>, <span class="string">"front on empty StrBlob"</span>);</div><div class="line">       <span class="keyword">return</span> data-&gt;front();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="built_in">string</span> &amp;<span class="title">back</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        check(<span class="number">0</span>, <span class="string">"back on empty StrBlob"</span>);</div><div class="line">        <span class="keyword">return</span> data-&gt;back();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">const</span> <span class="built_in">string</span> &amp;<span class="title">back</span><span class="params">()</span> <span class="keyword">const</span></span></div><div class="line">    &#123;</div><div class="line">        check(<span class="number">0</span>, <span class="string">"back on empty StrBlob"</span>);</div><div class="line">        <span class="keyword">return</span> data-&gt;back();</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(size_type i, <span class="keyword">const</span> <span class="built_in">string</span> &amp;msg)</span> <span class="keyword">const</span></span></div><div class="line">    &#123;</div><div class="line">    <span class="keyword">if</span> (i &gt;= data-&gt;size())</div><div class="line">        <span class="keyword">throw</span> <span class="built_in">std</span>::out_of_range(msg);</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; data;</div></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="非const-StrBlob对象"><a href="#非const-StrBlob对象" class="headerlink" title="非const StrBlob对象"></a>非const StrBlob对象</h3><p>根据<strong>StrBlob</strong>的定义，我们来测试一下：<br>首先声明一个<strong>StrBlob</strong>对象<strong>b1</strong>：</p>
<pre><code>StrBlob b1 = {&quot;a&quot;, &quot;an&quot;, &quot;the&quot;};        // 非const对象
</code></pre><p>然后分别对<strong>b1</strong>调用<code>push_back()</code>和<code>pop_back()</code>：</p>
<pre><code>b1.push_back(&quot;test&quot;);       // 向b1添加元素test
</code></pre><p>此时<strong>b1</strong>保存的内容是 <strong>a</strong>, <strong>an</strong>, <strong>the</strong>, <strong>test</strong>;<br>接着就是</p>
<pre><code>b1.pop_back();         // 删除刚刚添加的元素
</code></pre><p>此时<strong>b1</strong>保存的内容是 <strong>a</strong>, <strong>an</strong>, <strong>the</strong>;<br>可以看到，我们定义的非const的<strong>StrBlob</strong>对象进行<code>push_back()</code>和<code>pop_back()</code>操作是没有问题的。</p>
<h3 id="const-StrBlob对象"><a href="#const-StrBlob对象" class="headerlink" title="const StrBlob对象"></a>const StrBlob对象</h3><p>上面的操作都很顺利，那么当我们声明一个const <strong>StrBlob</strong>对象会怎么样呢？<br>接下来，我们声明一个const类型的<strong>StrBlob</strong>对象：</p>
<pre><code>const StrBlob cb = {&quot;a&quot;, &quot;an&quot;, &quot;the&quot;};       // const 对象
</code></pre><p>同样的，我们对<strong>cb</strong>调用<code>push_back()</code>和<code>pop_back()</code>，看看会发生什么：</p>
<pre><code>cb.push_back(&quot;test&quot;);       // 向cb添加元素test
</code></pre><p>运行一下程序，就会报错：</p>
<blockquote>
<p><em>Error C2662 “void StrBlob::push_back(const std::string &amp;)”: 不能将“this”指针从“const StrBlob”转换为“StrBlob &amp;”</em></p>
</blockquote>
<pre><code>cb.pop_back();           // 删除元素
</code></pre><p>在运行程序，同样也会报错：</p>
<blockquote>
<p><em>Error C2662 “void StrBlob::pop_back(void)”: 不能将“this”指针从“const StrBlob”转换为“StrBlob &amp;”</em></p>
</blockquote>
<p>原因是我们在定义<strong>StrBlob</strong>类时，<code>push_back()</code>和<code>pop_back()</code>并没有添const版本。<br>那么，自然而然地，我们将添加const版本的<code>push_back()</code>和<code>pop_back()</code>，在StrBlob.h中添加以下代码:</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/* StrBlob.h */</span></div><div class="line">...</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;t)</span> </span>&#123; data-&gt;push_back(t); &#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    check(<span class="number">0</span>, <span class="string">"pop_back on empty StrBlob"</span>);</div><div class="line">    data-&gt;pop_back();</div><div class="line">&#125;</div><div class="line"><span class="comment">// 添加const类型的push_back()和pop_back()</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;t)</span> <span class="keyword">const</span> </span></div><div class="line">&#123;</div><div class="line">    data-&gt;push_back(t);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span> <span class="keyword">const</span></span></div><div class="line">&#123;</div><div class="line">    check(<span class="number">0</span>, <span class="string">"pop_back on empty StrBlob"</span>);</div><div class="line">    data-&gt;pop_back();</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>再运行一下程序，通过了，并且输出和之前非const版本的一样。</p>
<h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><p>那么问题来了，我们到底需不需要const类型的`push_back()和pop_back()呢？</p>
<p>如果没有const的版本，那么对const类型的对象进行操作时，程序就会报错，貌似加const版本的<code>push_back()</code>和<code>pop_back()</code>是必须的。但是要注意的是：</p>
<p><strong>我们应该站在类的使用者的角度来看，而不是类的设计者的角度。虽然在类的具体实现中，数据成员是一个指向<code>vector&lt;string&gt;</code>的智能指针；但由于类的封装，在使用者看来，数据成员是<code>vector&lt;string&gt;</code>，他们并不知道具体实现使用了智能指针。那么当类的使用者声明类的常量对象时，他们期待的结果是<code>vector&lt;string&gt;</code>的内容不会改变。所以我们在设计这个类的时候，要考虑到类的使用者的真实意图，对于像<code>push_back()</code>和<code>pop_back()</code>这样会改变智能指针所指向的<code>vector&lt;string&gt;</code>内容的成员函数，我们不应该声明和定义成const版本。这样在类的使用者使用类的常量对象时，就不能调用<code>push_back()</code>和<code>pop_back()</code>成员函数，不能改变智能指针所指向的vector<string>的内容了，这正好与类的使用者意图相符。</string></strong></p>
<p>通过以上的考虑，我认为<strong>StrBlob</strong>不需要const版本的<code>push_back</code>和<code>pop_back</code>。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://www.douban.com/group/topic/61573279/" target="_blank" rel="external">豆瓣 - 大家来讨论一下 exercise 12.3</a></li>
<li><a href="https://stackoverflow.com/questions/20725190/operating-on-dynamic-memory-is-it-meaningful-to-overload-a-const-memeber-functi" target="_blank" rel="external">Stack Overflow - Operating on dynamic memory, is it meaningful to overload a const memeber function?</a></li>
</ol>
<p>End~</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;StrBlob需要const版本的&lt;code&gt;push_back&lt;/code&gt;和&lt;code&gt;pop_back&lt;/code&gt;吗？如果需要，添加进去。否则，解释为什么不需要。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="https://felon03.github.io/categories/C/"/>
    
    
      <category term="C++ Primer" scheme="https://felon03.github.io/tags/C-Primer/"/>
    
  </entry>
  
  <entry>
    <title>【每周一坑】杨辉三角形</title>
    <link href="https://felon03.github.io/2017/05/19/%E3%80%90%E6%AF%8F%E5%91%A8%E4%B8%80%E5%9D%91%E3%80%91%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E5%BD%A2/"/>
    <id>https://felon03.github.io/2017/05/19/【每周一坑】杨辉三角形/</id>
    <published>2017-05-19T06:28:26.000Z</published>
    <updated>2017-05-28T01:46:45.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><strong>本周题目</strong></p>
<blockquote>
<p>杨辉三角形，也称帕斯卡三角，其定义为：<br>顶端是1，视为(row0).<br>第1行(row1)是两个1，这两个1是由它们上头左右两数之和(不在三角形内视为0).<br>以此类推<br>第2行(row2)：0+1=1; 1+1=2; 1+0=1.<br>第3行(row3)：0+1=1; 1+2=3; 2+1=3; 1+0=1.</p>
</blockquote>
<a id="more"></a>
<p>根据上述方法可产生杨辉三角。如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">n = 0              1                     </div><div class="line">n = 1            1   1                   </div><div class="line">n = 2          1   2   1                 </div><div class="line">n = 3        1   3   3   1               </div><div class="line">n = 4      1   4   6   4   1             </div><div class="line">n = 5    1   5   10  10  5   1           </div><div class="line">n = ...         ...  ...</div></pre></td></tr></table></figure>
<p>根据上述定义，定义一个函数，传入正整数参数m、n，分别代表杨辉三角第M行，左起第N个数字(m,n都从0开始计算)。如超出范围则返回 <code>Invalid query</code>。</p>
<p>示例代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">yang_hui</span><span class="params">(m, n)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    &gt;&gt;&gt;yang_hui(1, 1)</div><div class="line">    1</div><div class="line">    &gt;&gt;&gt;yang_hui(3,2)</div><div class="line">    3</div><div class="line">    &gt;&gt;&gt;yang_hui(1,4)</div><div class="line">    Invalid query</div><div class="line">    '''</div></pre></td></tr></table></figure></p>
<p><strong>附加题</strong><br>生成杨辉三角形<br>定义一个函数，传入M&lt;1000,生成前M行杨辉三角形。<br>示例代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_yh</span><span class="params">(m)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    generate_yh(3):</div><div class="line">    1</div><div class="line">    1 1</div><div class="line">    1 2 1</div><div class="line">    '''</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>根据题目的描述，我们已经知道杨辉三角是怎么生成的了，不过还要判断超出范围的情况：<code>N &gt; M</code>时，返回的应该是 <code>Invalidquery</code>。还有 <code>n=0</code> 或 <code>n=m</code>     时，返回的值应该为1.<br>要求第(M,N)个数字，可以用递归的方式来求得：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yang_hui(m, n) = yang_hui(m<span class="number">-1</span>,n<span class="number">-1</span>) + yang_hui(m<span class="number">-1</span>,n)</div></pre></td></tr></table></figure></p>
<h2 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h2><p><strong>yang_hui(m,n):</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 输出杨辉三角中第m行第n列的数值</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">yang_hui</span><span class="params">(m, n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n <span class="keyword">and</span> n &gt; m:</div><div class="line">        <span class="keyword">return</span>  <span class="string">"Invalid query!"</span></div><div class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == m:</div><div class="line">        <span class="keyword">return</span>  <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> yang_hui(m<span class="number">-1</span>,n<span class="number">-1</span>) + yang_hui(m<span class="number">-1</span>,n)</div></pre></td></tr></table></figure></p>
<p><strong>triangles(m):</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">打印输出杨辉三角</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangles</span><span class="params">(m)</span>:</span></div><div class="line">    ret = [<span class="number">1</span>]</div><div class="line">    <span class="keyword">while</span> m:</div><div class="line">        <span class="keyword">yield</span> ret</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(ret)):</div><div class="line">            ret[i] = pre[i] + pre[i<span class="number">-1</span>]</div><div class="line">        ret.append(<span class="number">1</span>)</div><div class="line">        pre = ret[:]</div><div class="line">        m = m - <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>在生成杨辉三角的时候，用到了<strong>生成器(generator)</strong>。generator在执行过程中，遇到<code>yield</code>语句就返回，再次执行时从上次返回的<code>yield</code>语句处继续执行。<br><strong>普通函数和generator函数的区别：</strong><br>普通函数调用直接返回结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = abs(<span class="number">6</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r</div><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure></p>
<p>generator函数的“调用”实际返回一个generator对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = fib(<span class="number">6</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g</div><div class="line">&lt;generator object fib at <span class="number">0x1022ef498</span>&gt;</div></pre></td></tr></table></figure></p>
<p>关于generator，可以参考<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317799226173f45ce40636141b6abc8424e12b5fb27000#0" target="_blank" rel="external">这里</a>。</p>
<p><strong>测试</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 测试</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    print(yang_hui(<span class="number">0</span>, <span class="number">0</span>))</div><div class="line">    print(yang_hui(<span class="number">1</span>, <span class="number">1</span>))</div><div class="line">    print(yang_hui(<span class="number">1</span>, <span class="number">2</span>))</div><div class="line">    print(yang_hui(<span class="number">6</span>, <span class="number">3</span>))</div><div class="line">    print(yang_hui(<span class="number">4</span>, <span class="number">9</span>))</div><div class="line">    </div><div class="line">    <span class="comment"># 打印杨辉三角</span></div><div class="line">    triangle = triangles(<span class="number">10</span>)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> triangle:</div><div class="line">        print(i)</div></pre></td></tr></table></figure></p>
<h2 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h2><p>输出结果如下：</p>
<blockquote>
<p>1<br>1<br>Invalid query<br>20<br>Invalid query<br>[1]<br>[1, 1]<br>[1, 2, 1]<br>[1, 3, 3, 1]<br>[1, 4, 6, 4, 1]<br>[1, 5, 10, 10, 5, 1]<br>[1, 6, 15, 20, 15, 6, 1]<br>[1, 7, 21, 35, 35, 21, 7, 1]<br>[1, 8, 28, 56, 70, 56, 28, 8, 1]<br>[1, 9, 36, 84, 126, 126, 84, 36, 9, 1]</p>
</blockquote>
<p>End~</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本周题目&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;杨辉三角形，也称帕斯卡三角，其定义为：&lt;br&gt;顶端是1，视为(row0).&lt;br&gt;第1行(row1)是两个1，这两个1是由它们上头左右两数之和(不在三角形内视为0).&lt;br&gt;以此类推&lt;br&gt;第2行(row2)：0+1=1; 1+1=2; 1+0=1.&lt;br&gt;第3行(row3)：0+1=1; 1+2=3; 2+1=3; 1+0=1.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="https://felon03.github.io/categories/Python/"/>
    
    
      <category term="每周一坑" scheme="https://felon03.github.io/tags/%E6%AF%8F%E5%91%A8%E4%B8%80%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>【每周一坑】神奇的九宫格</title>
    <link href="https://felon03.github.io/2017/05/15/%E3%80%90%E6%AF%8F%E5%91%A8%E4%B8%80%E5%9D%91%E3%80%91%E7%A5%9E%E5%A5%87%E7%9A%84%E4%B9%9D%E5%AE%AB%E6%A0%BC/"/>
    <id>https://felon03.github.io/2017/05/15/【每周一坑】神奇的九宫格/</id>
    <published>2017-05-15T14:09:03.000Z</published>
    <updated>2017-05-26T08:14:58.005Z</updated>
    
    <content type="html"><![CDATA[<p>本周题目：</p>
<blockquote>
<p>给定一个3*3的九宫格和1-9九个数字，将9个数字按照一定规则填充进九宫格内，使九宫格内横、竖、斜每条线的和都相等，输出至少一种结果。</p>
</blockquote>
<p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Jiugongge</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    &gt;&gt;&gt; Jiugongge()</div><div class="line">    4 9 2</div><div class="line">    3 5 7</div><div class="line">    8 1 6</div><div class="line">    '''</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>附加题：</p>
<blockquote>
<p>给定一个正整数 N（N &gt;= 1），将 1 - N^2 填充到 N * N 的格子中，使横、竖、斜（对角线）每条线的和都相等，输出至少一种组合。</p>
</blockquote>
<p>比如 N 等于 3 时就是 9 宫格， N 等于 4 时为 16 宫格。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>在解决问题之前，要先了解一个东西 —— “幻方”。<br>Wiki上给出的中文定义：</p>
<blockquote>
<p><strong>幻方</strong>(Magic Square)，有时又称<strong>魔方</strong>（该称呼现一般指立方体的魔术方块）或<strong>纵横图</strong>，由一组排放在正方形中的整数组成，其每行、每列以及两条对角线上的数之和均相等。通常幻方由从$1$到 $N^{2}$的连续整数组成，其中$N$为正方形的行或列的数目。因此$N$阶幻方有$N$行$N$列，并且所填充的数为从$1$到$N^{2}$。</p>
<p>幻方可以使用$N$阶方阵来表示，方阵的每行、每列以及两条对角线的和都等于常数 $M_{2}(N)$，如果填充数为$1,2,\dots ,N^{2}$，那么有<br>$$M_{2}(N)={\frac  {N(N^{2}+1)}{2}}$$</p>
</blockquote>
<p>$N$阶幻方的解题思路分为三种情况：</p>
<ol>
<li>$N$为奇数</li>
<li>$N$为4的倍数</li>
<li>$N$为其他偶数</li>
</ol>
<h3 id="1-N-为奇数"><a href="#1-N-为奇数" class="headerlink" title="1. $N$为奇数"></a>1. $N$为奇数</h3><ul>
<li>将$1$放在第一行中间一列；</li>
<li>从$2$开始直到$n*n$为止各数依次按下列规则存放，按$45°$方向行走，如向右上，每一个数存放的行比前一个数的行数减$1$，列数加$1$；</li>
<li>如果行列范围超出矩阵范围，则回绕。例如$1$在第一行，则$2$应放在最下一行，列数同样加$1$；</li>
<li>如果按照上述规则确定的位置已有数，或上一个数是第$1$行$n$列时，则把下一个数放在上一个数的下面。</li>
</ul>
<h3 id="2-N-为-4-的倍数"><a href="#2-N-为-4-的倍数" class="headerlink" title="2. $N$为$4$的倍数"></a>2. $N$为$4$的倍数</h3><p>采用对称元素交换法。首先把数$1$到$n*n$按从上至下、从左至又的顺序填入矩阵。<br>然后将方阵的所有$N*N$子方阵中的两对角线上位置的数关于方阵中心作对称交换，即$a(i,j)$与$a(n-1-i, n-1-j)$交换，所有其它位置上的数不变。</p>
<h3 id="3-N-为非-4-的倍数的偶数-即-4n-2"><a href="#3-N-为非-4-的倍数的偶数-即-4n-2" class="headerlink" title="3. $N$为非$4$的倍数的偶数(即$4n+2$)"></a>3. $N$为非$4$的倍数的偶数(即$4n+2$)</h3><p>首先把大方阵分解为$4$个奇数字方阵。<br>按上述奇数幻方给分解的4个子方阵对应赋值,其中：<br>上左子阵最小$(i)$，下右子阵次小$(i+v)$，下左子阵最大$(i+3v)$，上右子阵次大$(i+2v)$<br>即$4$个子方阵对应元素相差$v$，其中$v={\frac {n*n}{4}}$<br>四个子矩阵由小到大排列方式为</p>
<p>$$<br>        \begin{bmatrix}<br>        1 &amp; 3 \<br>        4 &amp; 2 \<br>        \end{bmatrix}<br>$$</p>
<p>然后作相应的元素交换：$a(i,j)$ 与 $a(i+k,j)$在同一列做对应交换，$(j\lt t或j\gt n-t)$， $a(t,0)与a(t+k,0)$； $a(t,t)$ 与 $a(t+k,t)$ 两对元素交换，其中<br>$k = n//2，t=(n-2)//4$。</p>
<h2 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># n为奇数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">oddN</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 构造二维列表</span></div><div class="line">    lst = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)] <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</div><div class="line">    <span class="comment"># 初始化列表位置</span></div><div class="line">    x, y = <span class="number">0</span>, n//<span class="number">2</span></div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, n*n+<span class="number">1</span>):</div><div class="line">        lst[x][y] = num</div><div class="line">        xa, ya = x<span class="number">-1</span>, y+<span class="number">1</span></div><div class="line">        <span class="comment"># 回绕情况</span></div><div class="line">        <span class="keyword">if</span> xa &lt; <span class="number">0</span>:</div><div class="line">            xa = n<span class="number">-1</span></div><div class="line">        <span class="keyword">if</span> ya &gt; n<span class="number">-1</span>:</div><div class="line">            ya = <span class="number">0</span></div><div class="line">        <span class="comment"># 占位情况</span></div><div class="line">        <span class="keyword">if</span> lst[xa][ya] != <span class="number">0</span>:</div><div class="line">            x = x+<span class="number">1</span></div><div class="line">            <span class="keyword">if</span> x &gt; n<span class="number">-1</span>:</div><div class="line">                x = <span class="number">0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            x, y = xa, ya</div><div class="line">    <span class="keyword">return</span> lst</div><div class="line">    </div><div class="line"><span class="comment"># n为4的倍数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fourN</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="comment"># 初始化列表</span></div><div class="line">    lst = [[i+j <span class="keyword">for</span> i <span class="keyword">in</span> list(range(<span class="number">1</span>,n*n+<span class="number">1</span>))[::n]] <span class="keyword">for</span> j <span class="keyword">in</span> range(n)]</div><div class="line">    <span class="comment"># 交换对角线位置</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n//<span class="number">2</span>):</div><div class="line">        lst[i][i],lst[n<span class="number">-1</span>-i][n<span class="number">-1</span>-i] = lst[n<span class="number">-1</span>-i][n<span class="number">-1</span>-i],lst[i][i]</div><div class="line">        lst[i][n<span class="number">-1</span>-i],lst[n<span class="number">-1</span>-i][i] = lst[n<span class="number">-1</span>-i][i],lst[i][n<span class="number">-1</span>-i]</div><div class="line">    <span class="keyword">return</span> lst</div><div class="line"></div><div class="line"><span class="comment"># n为非4倍数的偶数</span></div><div class="line"><span class="comment"># 累加子矩阵</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">acc</span><span class="params">(p, lst)</span>:</span></div><div class="line">    <span class="comment"># print(lst)</span></div><div class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> lst:</div><div class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(len(row)):</div><div class="line">            row[index] += p</div><div class="line"></div><div class="line">    <span class="keyword">return</span> lst</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fourNplus2</span><span class="params">(n)</span>:</span></div><div class="line">    m = n // <span class="number">2</span></div><div class="line">    A, B, C, D = oddN(m), oddN(m), oddN(m), oddN(m)</div><div class="line">    B = acc(m ** <span class="number">2</span>, B)</div><div class="line">    C = acc(m ** <span class="number">2</span> * <span class="number">2</span>, C)</div><div class="line">    D = acc(m ** <span class="number">2</span> * <span class="number">3</span>, D)</div><div class="line">    <span class="keyword">for</span> row_index <span class="keyword">in</span> range(len(A)):</div><div class="line">        A[row_index].extend(C[row_index])</div><div class="line">        D[row_index].extend(B[row_index])</div><div class="line">    <span class="comment"># 合并子矩阵</span></div><div class="line">    matrix = A + D</div><div class="line">    t = (n - <span class="number">2</span>) // <span class="number">4</span></div><div class="line">    <span class="comment"># 列交换</span></div><div class="line">    <span class="keyword">for</span> col_index <span class="keyword">in</span> range(len(matrix[<span class="number">0</span>])):</div><div class="line">        <span class="keyword">if</span> col_index &lt; t <span class="keyword">or</span> col_index &gt; n - t:</div><div class="line">            <span class="keyword">for</span> row_index <span class="keyword">in</span> range(len(matrix) // <span class="number">2</span>):</div><div class="line">                matrix[row_index][col_index], matrix[row_index + m][col_index] = \</div><div class="line">                    matrix[row_index + m][col_index], matrix[row_index][col_index]</div><div class="line">                <span class="comment"># 交换特殊位置</span></div><div class="line">    matrix[t][<span class="number">0</span>], matrix[m + t][<span class="number">0</span>] = matrix[m + t][<span class="number">0</span>], matrix[t][<span class="number">0</span>]</div><div class="line">    matrix[t][t], matrix[m + t][t] = matrix[m + t][t], matrix[t][t]</div><div class="line">    <span class="keyword">return</span> matrix</div></pre></td></tr></table></figure>
<p>End~</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本周题目：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个3*3的九宫格和1-9九个数字，将9个数字按照一定规则填充进九宫格内，使九宫格内横、竖、斜每条线的和都相等，输出至少一种结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Jiugongge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;gt;&amp;gt;&amp;gt; Jiugongge()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    4 9 2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    3 5 7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    8 1 6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &#39;&#39;&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://felon03.github.io/categories/Python/"/>
    
    
      <category term="每周一坑" scheme="https://felon03.github.io/tags/%E6%AF%8F%E5%91%A8%E4%B8%80%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>【每周一坑】求乘积最大</title>
    <link href="https://felon03.github.io/2017/05/03/%E3%80%90%E6%AF%8F%E5%91%A8%E4%B8%80%E5%9D%91%E3%80%91%E6%B1%82%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7/"/>
    <id>https://felon03.github.io/2017/05/03/【每周一坑】求乘积最大/</id>
    <published>2017-05-03T13:58:01.000Z</published>
    <updated>2017-05-26T08:14:52.822Z</updated>
    
    <content type="html"><![CDATA[<p>本周题目：</p>
<blockquote>
<p>设定一个长度为N的数字串，将其分为两部分，找出一个切分位置，是两部分的乘积值最大，并返回最大值</p>
</blockquote>
<p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span><span class="params">(num)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    &gt;&gt;&gt;product(312)</div><div class="line">    62</div><div class="line">    &gt;&gt;&gt;product(1234)</div><div class="line">    492</div><div class="line">    &gt;&gt;&gt;product(12345)</div><div class="line">    6170</div><div class="line">    &gt;&gt;&gt;product(123456)</div><div class="line">    74070</div><div class="line">    '''</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>从头到尾遍历这个数字串，</p>
<ol>
<li>先是按顺序截取长度为1的子串与剩余的子串相乘得到一个结果</li>
<li>然后还是按顺序截取长度为2的子串与剩余的子串相乘得到新的结果</li>
<li>以此类推…<br>直到截取的长度为原来的数字串的长度(除了数字串本身)然后将这些结果进行比较，得到最大的并输出即可。</li>
</ol>
<p>可以将每一步求出的值存入初始值为0的<code>max_num</code>中，每次求出的值都与<code>max_num</code>比较，若大于<code>max_num</code>，则更新它的值，这样可以保证得到最大的值，也即我们要求的最大值。</p>
<h2 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span><span class="params">(num)</span>:</span></div><div class="line">    i = <span class="number">1</span>               </div><div class="line">    max_num = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> i != len(str(num)):</div><div class="line">        num1 = int(str(num)[:i])</div><div class="line">        num2 = int(str(num)[i:])</div><div class="line">        result = num1 * num2</div><div class="line">        <span class="comment"># result = int(str(num)[:i]) * int(str(num)[i:])</span></div><div class="line">        <span class="keyword">if</span> result &gt; max_num:</div><div class="line">            max_num = result</div><div class="line">        i += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> max_num</div><div class="line"></div><div class="line"><span class="comment"># 测试</span></div><div class="line">print(product(<span class="number">312</span>))</div><div class="line">print(product(<span class="number">1234</span>))</div><div class="line">print(product(<span class="number">12345</span>))</div><div class="line">print(product(<span class="number">123456</span>))</div></pre></td></tr></table></figure>
<h2 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h2><p>结果为：</p>
<blockquote>
<p>62<br>492<br>6170<br>74070</p>
</blockquote>
<p>结果与示例相符合</p>
<h2 id="附加题"><a href="#附加题" class="headerlink" title="附加题"></a>附加题</h2><p>上述的题目感觉还是比较简单的，因此多了一个附加题：</p>
<blockquote>
<p>输入的数字串可以重新打乱排列，比如输入123，打乱排列之后会有132，213，231，312，321等情况，其他条件不变，求最大值。</p>
</blockquote>
<p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">product_2</span><span class="params">(num)</span>:</span></div><div class="line">  <span class="string">'''</span></div><div class="line">  &gt;&gt;&gt;product_2(1234)</div><div class="line">  1312</div><div class="line">  &gt;&gt;&gt;product_2(12345)</div><div class="line">  22412</div><div class="line">  &gt;&gt;&gt;product_2(123456)</div><div class="line">  342002</div><div class="line">  '''</div></pre></td></tr></table></figure></p>
<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>可以打乱顺序，那么如何得到所有的可能数组串就是这个问题的关键了。可惜，我一开始并没有想到用什么方法，如果强行暴力求的话复杂度高不说，还可能求不全。于是我参考了别人的代码，发现了一个神奇的库：<a href="https://docs.python.org/3.6/library/itertools.html#module-itertools" target="_blank" rel="external"><strong>itertools</strong></a>。<br>它属于Python标准库，今天用到的是<a href="https://docs.python.org/3.6/library/itertools.html#itertools.permutations" target="_blank" rel="external"><strong>permutations()</strong></a>这个函数：</p>
<blockquote>
<p>permutations(p[,r]); 创建一个迭代器，返回iterable中所有长度为r的项目序列，如果省略了r，那么序列的长度与iterable中的项目数量相同<br>返回p中任意取r个元素做排列的元组的迭代器</p>
</blockquote>
<p>例如：</p>
<blockquote>
<p>permutations(‘ABCD’, 2)</p>
</blockquote>
<p>返回的结果为：</p>
<blockquote>
<p>AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD</p>
</blockquote>
<p>有了这个函数，我们就可以完成附加题了</p>
<h2 id="Python实现-1"><a href="#Python实现-1" class="headerlink" title="Python实现"></a>Python实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">product_2</span><span class="params">(num)</span>:</span></div><div class="line">    i = <span class="number">1</span></div><div class="line">    max_num = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> permutations(str(num)):</div><div class="line">        new_num = <span class="string">""</span>.join(p)            <span class="comment"># 排列后返回的是一个元组，通过join()来重新生成数字串</span></div><div class="line">        <span class="comment"># print(new_num)</span></div><div class="line">        result = product(new_num)       <span class="comment"># 就是上面的product()</span></div><div class="line">        <span class="keyword">if</span> result &gt; max_num:</div><div class="line">            max_num = result</div><div class="line">    <span class="keyword">return</span> max_num</div><div class="line">    </div><div class="line"></div><div class="line"><span class="comment"># 测试</span></div><div class="line">print(product_2(<span class="number">1234</span>))</div><div class="line">print(product_2(<span class="number">12345</span>))</div><div class="line">print(product_2(<span class="number">123456</span>))</div></pre></td></tr></table></figure>
<h2 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h2><p>结果为：</p>
<blockquote>
<p>1312<br>22412<br>342002</p>
</blockquote>
<p>与示例一致</p>
<p>End~</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本周题目：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设定一个长度为N的数字串，将其分为两部分，找出一个切分位置，是两部分的乘积值最大，并返回最大值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;gt;&amp;gt;&amp;gt;product(312)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;gt;&amp;gt;&amp;gt;product(1234)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    492&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;gt;&amp;gt;&amp;gt;product(12345)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    6170&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;gt;&amp;gt;&amp;gt;product(123456)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    74070&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &#39;&#39;&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://felon03.github.io/categories/Python/"/>
    
    
      <category term="每周一坑" scheme="https://felon03.github.io/tags/%E6%AF%8F%E5%91%A8%E4%B8%80%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>【每周一坑】程序员的浪漫</title>
    <link href="https://felon03.github.io/2017/04/27/%E3%80%90%E6%AF%8F%E5%91%A8%E4%B8%80%E5%9D%91%E3%80%91%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%B5%AA%E6%BC%AB/"/>
    <id>https://felon03.github.io/2017/04/27/【每周一坑】程序员的浪漫/</id>
    <published>2017-04-27T07:39:22.000Z</published>
    <updated>2017-05-28T01:19:15.982Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/imagesource/17-04-27.jpg" alt="wordcloud"></p>
<p>关注了<strong>Crossin的编程教室</strong>，每周会出一个Python的小题目，本周的题目是关于hashlib和base64加密模块的。</p>
<p>问题如下：</p>
<p>在python中有hashlib和base64两大加密模块，将一串字符串先经过hashlib.md5加密，然后再经过base64加密，最后得到一串字符：</p>
<blockquote>
<p>‘NDRiMWZmMmVjZTk5MTFjMWI1MDNkYTY0MzZlYTAzMTA=\n’</p>
</blockquote>
<p>在此给出4个选项</p>
<ol>
<li>我们在一起吧</li>
<li>我选择原谅你</li>
<li>别说话，吻我</li>
<li>多喝热水</li>
</ol>
<p>使用科学的方法算出说的是什么。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>其实思路也挺简单，hashlib里有MD5模块，只需调用</p>
<blockquote>
<p>hashlib.md5(“要生成MD5的字符串”)</p>
</blockquote>
<p>即可生成。</p>
<p>而我们已经知道了经过MD5加密和base64加密后的字符串，可以通过base64的解码函数：</p>
<blockquote>
<p>base64.b64decode(“已知的字符串”)</p>
</blockquote>
<p>即可得到解码后的内容。</p>
<p>最后只要将hashlib.md5()的内容和base64.b64decode()的内容进行比较，如果相同就输出生成改md5的字符串即可。</p>
<h2 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> base64, hashlib      <span class="comment"># 引入需要使用的库</span></div><div class="line"></div><div class="line">answer = <span class="string">'NDRiMWZmMmVjZTk5MTFjMWI1MDNkYTY0MzZlYTAzMTA=\n'</span>   <span class="comment"># 问题中的字符串</span></div><div class="line">checkStr = &#123;<span class="string">'我们在一起吧'</span>, <span class="string">'我选择原谅你'</span>, <span class="string">'别说话，吻我'</span>, <span class="string">'多喝热水'</span>&#125;     <span class="comment"># 将选项存入字典，后面使用</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> checkStr:      <span class="comment"># 遍历字典中的个字符串</span></div><div class="line">        md5 = hashlib.md5(x.encode(<span class="string">'utf-8'</span>))        <span class="comment"># 使用hashlib.md5()进行编码</span></div><div class="line">        md5_byte = bytes(md5.hexdigest().encode(<span class="string">'utf-8'</span>))       <span class="comment"># base64.decode()得到的是bytes类型的，</span></div><div class="line">		 <span class="comment"># 无法直接与string比较，这里把string类型的md5转换成bytes类型的</span></div><div class="line">        b64_byte = base64.decode(answer)</div><div class="line">        <span class="keyword">if</span> md5_byte == b64_byte:</div><div class="line">            print(<span class="string">'The answer is'</span>, x)</div><div class="line">            </div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<h2 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h2><p>万！万！没！想！到！ 结果居然是….</p>
<blockquote>
<p>多喝热水</p>
</blockquote>
<p>说好的程序员的浪漫呢！！要是女朋友千辛万苦解出来看到是这句话，估计会被打死吧…</p>
<p>然而…</p>
<p>和我并没有什么关系QAQ，谁叫我没有女朋友╮(╯▽╰)╭</p>
<p>End~</p>
<hr>
<p>[1]: 图片出处: <a href="http://mp.weixin.qq.com/s/L2DEcnUTb5IFOC8miOO9UA" target="_blank" rel="external">http://mp.weixin.qq.com/s/L2DEcnUTb5IFOC8miOO9UA</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/imagesource/17-04-27.jpg&quot; alt=&quot;wordcloud&quot;&gt;&lt;/p&gt;
&lt;p&gt;关注了&lt;strong&gt;Crossin的编程教室&lt;/strong&gt;，每周会出一个Python的小题目，本周的题目是关于hashlib和base64加密模块的。&lt;/p&gt;
&lt;p&gt;问题如下：&lt;/p&gt;
&lt;p&gt;在python中有hashlib和base64两大加密模块，将一串字符串先经过hashlib.md5加密，然后再经过base64加密，最后得到一串字符：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;‘NDRiMWZmMmVjZTk5MTFjMWI1MDNkYTY0MzZlYTAzMTA=\n’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在此给出4个选项&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们在一起吧&lt;/li&gt;
&lt;li&gt;我选择原谅你&lt;/li&gt;
&lt;li&gt;别说话，吻我&lt;/li&gt;
&lt;li&gt;多喝热水&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用科学的方法算出说的是什么。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https://felon03.github.io/categories/Python/"/>
    
    
      <category term="每周一坑" scheme="https://felon03.github.io/tags/%E6%AF%8F%E5%91%A8%E4%B8%80%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>函数返回数组指针或数组引用</title>
    <link href="https://felon03.github.io/2017/04/15/%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88%E6%88%96%E6%95%B0%E7%BB%84%E5%BC%95%E7%94%A8/"/>
    <id>https://felon03.github.io/2017/04/15/函数返回数组指针或数组引用/</id>
    <published>2017-04-15T11:05:14.000Z</published>
    <updated>2017-04-15T11:08:49.766Z</updated>
    
    <content type="html"><![CDATA[<p>因为数组不能被拷贝，所以函数不能返回数组。不过，函数可以返回数组的指针或引用。<br>下面就介绍几种方法：</p>
<a id="more"></a>
<h2 id="方法一：-使用类型别名"><a href="#方法一：-使用类型别名" class="headerlink" title="方法一： 使用类型别名"></a>方法一： 使用类型别名</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> arrT[<span class="number">10</span>];       <span class="comment">// arrT是一个类型别名，表示的类型</span></div><div class="line">                            <span class="comment">// 是含有10个整型的数组</span></div><div class="line"><span class="keyword">using</span> arrT = <span class="keyword">int</span>[<span class="number">10</span>];       <span class="comment">// arrT的等价声明</span></div><div class="line"><span class="function">arrT* <span class="title">func</span><span class="params">(<span class="keyword">int</span> i)</span></span>;          <span class="comment">// func返回一个指向含有10个整数的数组的指针</span></div></pre></td></tr></table></figure>
<p>其中<code>arrT</code>是含有10个整数的数组别名。因为无法返回数组，所以将返回类型定义成数组的指针。因此<code>func</code>函数接受一个<code>int</code>实参，返回一个指向包含10个整数的数组的指针。</p>
<h2 id="方法二：-声明一个返回数组指针的函数"><a href="#方法二：-声明一个返回数组指针的函数" class="headerlink" title="方法二： 声明一个返回数组指针的函数"></a>方法二： 声明一个返回数组指针的函数</h2><p>要想在声明<code>func</code>时不适用类型别名，我们必须牢记被定义的名字后面数组的维度：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> arr[<span class="number">10</span>];            <span class="comment">// arr是一个含有10个整数的数组</span></div><div class="line"><span class="keyword">int</span> *p1[<span class="number">10</span>];            <span class="comment">// p1是一个含有10个指针的数组</span></div><div class="line"><span class="keyword">int</span> (*p2)[<span class="number">10</span>] = &amp;arr;   <span class="comment">// p2是一个指针，他只想含有10个整数的数组</span></div></pre></td></tr></table></figure></p>
<p>和这些声明一样，如果想定义一个返回数组指针的函数，则数组的维度必须跟在函数名字之后。然而，函数的形参列表也更在函数名字后面且形参列表应该咸鱼数组的维度。因此，返回数组指针的函数形式如下所示：</p>
<blockquote>
<p>Type (*function(parameter_list)) [dimension]</p>
</blockquote>
<p>类似于其他数组的声明，<code>Type</code>表示元素的类型，<code>dimension</code>表示数组的大小。<code>(*function(parameter_list))</code>两段的括号必须存在，就像定义<code>p2</code>时两段必须有括号一样。如果没有这对括号，函数返回的类型将是指针的数组。</p>
<p>举个具体点的例子，下面这个func函数的声明没有使用类型别名：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> (*func(<span class="keyword">int</span> i)) [<span class="number">10</span>];</div></pre></td></tr></table></figure></p>
<p>可以按照以下的顺序来逐层理解该声明的含义：</p>
<ul>
<li><code>func(int i)</code>表示调用<code>func</code>函数时需要一个<code>int</code>类型的实参</li>
<li><code>(*func(int i))</code>意味这我们可以对函数调用的结果执行解引用操作</li>
<li><code>(*func(int i)) [10]</code>表示解引用<code>func</code>的调用将得到一个大小是10的数组</li>
<li><code>int(*func(int i)) [10]</code>表示数组中元素是<code>int</code>类型</li>
</ul>
<h2 id="方法三：-使用尾置返回类型"><a href="#方法三：-使用尾置返回类型" class="headerlink" title="方法三： 使用尾置返回类型"></a>方法三： 使用尾置返回类型</h2><p>在C++11新标准中海油可以简化上述<code>func</code>声明的方法，就是使用<strong>尾置返回类型(trailing return type)</strong>。任何函数的定义都能使用尾置返回，但是这样形式对于返回类型比较复杂的函数最有效，比如返回类型是数组的指针或者数组的引用。位置返回类型跟在形参列表后面并以一个-&gt;符号开头。为了表示函数真正的返回类型跟在形参列表之后，我们在本应该出现返回类型的地方放置一个<code>auto</code>：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// func接受一个int类型的实参，返回一个指针，该指针指向含有10个整数的数组</div><div class="line">auto func(int i) -&gt; int(*) [10];</div></pre></td></tr></table></figure>
<p>因为我们把函数的返回类型放在了形参列表之后，所以可以清楚地看到func函数返回的是一个指针，并且该指针指向了含有10个整数的数组。</p>
<h2 id="方法四：-使用decltype"><a href="#方法四：-使用decltype" class="headerlink" title="方法四： 使用decltype"></a>方法四： 使用decltype</h2><p>还有一种情况，如果我们知道函数返回的指针将指向哪个数组，就可以使用decltype关键字声明返回类型。例如，下面的函数返回一个指针，该指针根据参数<code>i</code>的不同指向两个已知数组中的某一个：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> odd[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</div><div class="line"><span class="keyword">int</span> even[] = &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</div><div class="line"><span class="comment">// 返回一个指针，该指针指向含有5个整数的数组</span></div><div class="line"><span class="keyword">decltype</span>(odd) *addPtr(<span class="keyword">int</span> i)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> (i % <span class="number">2</span>) ? &amp;odd : &amp;even;      <span class="comment">// 返回一个指向数组的指针</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>arrPtr</code>使用关键字decltype表示它的返回类型是个指针，并且该指针所指的对象与<code>odd</code>类型一致。因为<code>odd</code>是数组，所以<code>arrPtr</code>返回一个指向含有5个整数的数组的指针。有一个地方需要注意： decltype并不负责把数组类型转换成对应的指针，所以decltype的结果是个数组，想要表示arrPtr返回指针还必须在函数声明是加一个<code>*</code>符号。</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="1-编写一个程序，使其返回数组的引用并且该数组白喊10个string对象。不要使用尾置返回类型、decltype或者类型别名。"><a href="#1-编写一个程序，使其返回数组的引用并且该数组白喊10个string对象。不要使用尾置返回类型、decltype或者类型别名。" class="headerlink" title="1. 编写一个程序，使其返回数组的引用并且该数组白喊10个string对象。不要使用尾置返回类型、decltype或者类型别名。"></a>1. 编写一个程序，使其返回数组的引用并且该数组白喊10个string对象。不要使用尾置返回类型、decltype或者类型别名。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">string</span> (&amp;func(<span class="built_in">string</span> (&amp;arr)[<span class="number">10</span>])) [<span class="number">10</span>];</div></pre></td></tr></table></figure>
<h3 id="2-为上一题的函数再写三个声明，一个使用类型别名，另一个使用尾置返回类型，最后一个使用decltype关键字。"><a href="#2-为上一题的函数再写三个声明，一个使用类型别名，另一个使用尾置返回类型，最后一个使用decltype关键字。" class="headerlink" title="2. 为上一题的函数再写三个声明，一个使用类型别名，另一个使用尾置返回类型，最后一个使用decltype关键字。"></a>2. 为上一题的函数再写三个声明，一个使用类型别名，另一个使用尾置返回类型，最后一个使用decltype关键字。</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 使用类型别名</div><div class="line">using arrT = string[10];</div><div class="line">arrT&amp; func1(arrT&amp; arr);</div><div class="line"></div><div class="line">// 使用尾置返回类型</div><div class="line">auto func2(arrT&amp; arr)-&gt;string(&amp;) [10];</div><div class="line"></div><div class="line">// 使用decltype关键字</div><div class="line">string arrS[10];</div><div class="line">decltype(arrS) &amp;func3(arrT&amp; arr);</div></pre></td></tr></table></figure>
<h3 id="3-修改arrPtr函数，使其返回数组的引用"><a href="#3-修改arrPtr函数，使其返回数组的引用" class="headerlink" title="3. 修改arrPtr函数，使其返回数组的引用"></a>3. 修改arrPtr函数，使其返回数组的引用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> odd[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</div><div class="line"><span class="keyword">int</span> even[] = &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</div><div class="line"><span class="keyword">decltype</span>(odd) &amp;arrPtr(<span class="keyword">int</span> i)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> (i % <span class="number">2</span>) ? odd : even;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为数组不能被拷贝，所以函数不能返回数组。不过，函数可以返回数组的指针或引用。&lt;br&gt;下面就介绍几种方法：&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="https://felon03.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://felon03.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++前置递增（递减）和后置递增（递减）运算符</title>
    <link href="https://felon03.github.io/2017/04/07/C-%E5%89%8D%E7%BD%AE%E9%80%92%E5%A2%9E%EF%BC%88%E9%80%92%E5%87%8F%EF%BC%89%E5%92%8C%E5%90%8E%E7%BD%AE%E9%80%92%E5%A2%9E%EF%BC%88%E9%80%92%E5%87%8F%EF%BC%89%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://felon03.github.io/2017/04/07/C-前置递增（递减）和后置递增（递减）运算符/</id>
    <published>2017-04-07T10:31:16.000Z</published>
    <updated>2017-04-07T10:34:36.925Z</updated>
    
    <content type="html"><![CDATA[<p>在做C++ primer 第五版课后习题4.31时遇到一个问题：</p>
<blockquote>
<p>本节的程序使用了前置版本的递增运算符和递减运算符，解释为什么要用前置版本而不用后置版本。要想使用后置版本的递增递减运算符需要做哪些改动？使用后置版本重写本节程序。</p>
</blockquote>
<a id="more"></a>
<p>源程序代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type cnt = ivec.size();</div><div class="line"><span class="comment">// 将把从size到1的值赋给ivec的元素</span></div><div class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type ix = <span class="number">0</span>;</div><div class="line">                    ix != ivec.size(); ++ix, --cnt)</div><div class="line">    ivec[ix] = cnt;</div></pre></td></tr></table></figure></p>
<p>可以看到源程序用的是前置递增和递减运算符<br>我根据源代码写了一下可运行的版本：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ivec(<span class="number">10</span>, <span class="number">0</span>);        <span class="comment">// 初始化ivec</span></div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type cnt = ivec.size();</div><div class="line">	<span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type ix = <span class="number">0</span>; </div><div class="line">	                    ix != ivec.size(); ++ix, --cnt)</div><div class="line">		ivec[ix] = cnt;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : ivec)</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出的结果为</p>
<blockquote>
<p>10 9 8 7 6 5 4 3 2 1</p>
</blockquote>
<p>然后根据题目的意思，使用了后置版本的递增和递减运算符：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ivec(<span class="number">10</span>, <span class="number">0</span>);        <span class="comment">// 初始化ivec</span></div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type cnt = ivec.size();</div><div class="line">	<span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type ix = <span class="number">0</span>; </div><div class="line">	                    ix != ivec.size(); ix++, cnt--)</div><div class="line">		ivec[ix] = cnt;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : ivec)</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出的结果为</p>
<blockquote>
<p>10 9 8 7 6 5 4 3 2 1</p>
</blockquote>
<p>结果一样啊喂！(＃°Д°)<br>哪里需要修改了(╯‵□′)╯︵┻━┻<br>各种百度没有没百度到，突然想起来可以找课后练习答案啊！<br>找到了结果，还以为我错了，没想到答案居然是…</p>
<blockquote>
<p>We use prefix and not postfix, just because of the <strong>Advice: Use Postfix   Advice: Use Postfix Operators only When Necessary</strong>.<br>So, it’s just a good habits. And there are no changes if we have to be made to use the postfix versions. Rewrite:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type ix = <span class="number">0</span>; ix != ivec.size(); ix++, cnt--)  </div><div class="line">    ivec[ix] = cnt;</div></pre></td></tr></table></figure></p>
<p>This is not an appropriate example to discuss the difference of prefix and postfix.</p>
</blockquote>
<p>果然不是我的问题 ( •̀ ω •́ )</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做C++ primer 第五版课后习题4.31时遇到一个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本节的程序使用了前置版本的递增运算符和递减运算符，解释为什么要用前置版本而不用后置版本。要想使用后置版本的递增递减运算符需要做哪些改动？使用后置版本重写本节程序。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="C++" scheme="https://felon03.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://felon03.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ string输入问题</title>
    <link href="https://felon03.github.io/2017/03/31/C-string%E8%BE%93%E5%85%A5%E9%97%AE%E9%A2%98/"/>
    <id>https://felon03.github.io/2017/03/31/C-string输入问题/</id>
    <published>2017-03-31T06:38:28.000Z</published>
    <updated>2017-03-31T06:46:20.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote>
<p>使用cin读入一组字符串并存入一个vector对象</p>
</blockquote>
<a id="more"></a>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>使用如下代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">/*用cin读入一组字符串并把它们存入一个vector对象*/</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; text;</div><div class="line">	<span class="built_in">string</span> word;</div><div class="line">	<span class="keyword">while</span> (getline(<span class="built_in">cin</span>, word))</div><div class="line">	&#123;</div><div class="line">		text.push_back(word);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> i : text)</div><div class="line">		<span class="keyword">if</span> (i == text.back())</div><div class="line">			<span class="built_in">cout</span> &lt;&lt; i;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">","</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"]"</span>;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在运行测试时发现了一个问题：<br>当输入为</p>
<blockquote>
<p>aa ss dd qq ww ee^Z (注意，^Z是在字符串输入完成后直接在后面加入的)</p>
</blockquote>
<p>按回车后发现输出卡出了，并不会输出所输入的字符串</p>
<p>当输入为</p>
<blockquote>
<p>aa ss dd qq ww ee<br>^Z(换行后的^Z)</p>
</blockquote>
<p>就可以正确输出了</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>百思不得其解，遂百度之。<br>看到了两种解释，感觉都有道理，就都贴上来好了<br>1.</p>
<blockquote>
<p>因为标准C++ I/O函数是有缓冲的，你输入aa dd ssctrl+z之后，cin调用read读到aa dd ss到缓冲中，返回aa给用户，再次调用直接返回dd，再次调用直接返回ss，从而忽略掉了ctrl+z，因为第一次read把它带过了。此刻调用cin，因为缓冲区空，于是read阻塞等待输入，你输入ctrl+z，read返回0，于是cin&gt;&gt;调用立即返回，cin状态为eof，while退出。</p>
</blockquote>
<p>2.</p>
<blockquote>
<p>windows认为，如果缓冲中还有其它内容，ctrl+z不表示输入结束，仅代表当前行输入结束，只在单独一个ctrl+z的时候才表示输入结束。</p>
</blockquote>
<p>意思就是说如果使用ctrl+z来结束输入的话，一定要是单独使用，不能在输入后面直接加。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用cin读入一组字符串并存入一个vector对象&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="C++" scheme="https://felon03.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://felon03.github.io/tags/C/"/>
    
      <category term="String" scheme="https://felon03.github.io/tags/String/"/>
    
      <category term="vector" scheme="https://felon03.github.io/tags/vector/"/>
    
  </entry>
  
  <entry>
    <title>给出一个表达式，按照顺序求出表达式的值</title>
    <link href="https://felon03.github.io/2017/03/25/%E7%BB%99%E5%87%BA%E4%B8%80%E4%B8%AA%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E6%8C%89%E7%85%A7%E9%A1%BA%E5%BA%8F%E6%B1%82%E5%87%BA%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%80%BC/"/>
    <id>https://felon03.github.io/2017/03/25/给出一个表达式，按照顺序求出表达式的值/</id>
    <published>2017-03-25T14:54:21.000Z</published>
    <updated>2017-03-25T15:04:53.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="按顺序求出表达式的值"><a href="#按顺序求出表达式的值" class="headerlink" title="按顺序求出表达式的值"></a>按顺序求出表达式的值</h2><p>今天碰到一个题目：<br><strong>题目描述：</strong></p>
<blockquote>
<p>常规的表达式求值，我们都会根据计算的优先级来计算， 比如<code>*</code>、<code>/</code>的优先级就高于<code>+</code>、<code>-</code>。但是小易所生活的世界的表达式规则很简单，从左往右依次计算即可，而且小易所在的世界没有除法(心想：他们的世界是有多傻→_→)，意味着表达式中没有<code>/</code>，只有(<code>+</code>,<code>-</code>和<code>*</code>)。现给出一个表达式，需要你帮忙计算出小易所在的世界这个表达式的值为多少。</p>
</blockquote>
<p><strong>输入描述：</strong></p>
<blockquote>
<p>输入为一行字符串，即一个表达式。其中运算符只有<code>+</code>,<code>-</code>和<code>*</code>。参与计算的数字只有0-9。<br>保证表达式是合法的，排列规则如样例所示。</p>
</blockquote>
<p><strong>输出描述</strong></p>
<blockquote>
<p>输出一个数，即表达式的值</p>
</blockquote>
<a id="more"></a>
<p><strong>输入例子</strong></p>
<blockquote>
<p>3+5*7</p>
</blockquote>
<p><strong>输出例子</strong></p>
<blockquote>
<p>56</p>
</blockquote>
<p>刚开始觉得挺简单，就是字符串处理什么的，也没怎么在意，后来实现的时候才发现，原来还是有点麻烦的…</p>
<h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 输入字符串表达式，按照输入顺序求出表达式的结果</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">// 字符串转数字</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_number</span><span class="params">(<span class="built_in">string</span> num_str)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">stringstream</span> stream;	<span class="comment">// 声明stringstram变量</span></div><div class="line">	<span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> str_len = num_str.length();</div><div class="line">	stream &lt;&lt; num_str;</div><div class="line">	stream &gt;&gt; result;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">string</span> s;		<span class="comment">// 保存输入的字符串</span></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要计算的表达式(不包含除):"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; s;</div><div class="line">	<span class="keyword">int</span> number[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;		<span class="comment">// 保存数字的数组</span></div><div class="line">	<span class="built_in">string</span> operator_str;		<span class="comment">// 保存操作符的字符串</span></div><div class="line">	<span class="keyword">int</span> length = s.length();</div><div class="line">	<span class="built_in">string</span> number_str;		<span class="comment">// 保存每个操作符之前的字符串</span></div><div class="line">	<span class="keyword">int</span> index = <span class="number">0</span>;	<span class="comment">// 标记保存数字的数组的指针</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (s[i] &gt;= <span class="string">'0'</span> &amp;&amp; s[i] &lt;= <span class="string">'9'</span>)		<span class="comment">// 如果是数字，则存入 number_str</span></div><div class="line">		&#123;</div><div class="line">			number_str += s[i];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span>		<span class="comment">// 如果是操作符，存入operator_str</span></div><div class="line">		&#123;</div><div class="line">			operator_str += s[i];</div><div class="line">			number[index] = get_number(number_str);		<span class="comment">// 得到两个操作符之间的操作数，并存入数组</span></div><div class="line">			index++;</div><div class="line">			number_str = <span class="string">""</span>;			<span class="comment">// 将字符串置为空，重新存入下一个操作数的字符串</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (i == length <span class="number">-1</span>)		<span class="comment">// 得到表达式的最后一个操作数</span></div><div class="line">		&#123;</div><div class="line">			number[index] = get_number(number_str);</div><div class="line">			index++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> result = <span class="number">0</span>;		<span class="comment">// 计算结果</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">//todo 计算结果</span></div><div class="line">		<span class="keyword">if</span> (i&lt;<span class="number">1</span>)</div><div class="line">		&#123;</div><div class="line">			result += number[i];</div><div class="line">		&#125; </div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">switch</span> (operator_str[i<span class="number">-1</span>])</div><div class="line">			&#123;</div><div class="line">			<span class="keyword">case</span> <span class="string">'+'</span>:</div><div class="line">				result = result + number[i];</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="string">'-'</span>:</div><div class="line">				result = result - number[i];</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="string">'*'</span>:</div><div class="line">				result = result * number[i];</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">default</span>:</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//cout &lt;&lt; number[i] &lt;&lt; endl;</span></div><div class="line">	&#125;</div><div class="line">	<span class="comment">//for (int i = 0; i &lt; operator_str.length(); i++)</span></div><div class="line">	<span class="comment">//&#123;</span></div><div class="line">	<span class="comment">//	cout &lt;&lt; operator_str[i] &lt;&lt; endl;</span></div><div class="line">	<span class="comment">//&#125;</span></div><div class="line">	<span class="comment">//cout &lt;&lt; "输入的字符串为:" &lt;&lt; s &lt;&lt; " 得到的数字为: " &lt;&lt; number &lt;&lt; endl;</span></div><div class="line"></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Result = "</span> &lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	system(<span class="string">"pause"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>挺简单的题目，居然写了这么多！ <em> </em>(:3」∠)<em> </em><br>太久没写了，写的有点丑¬<em>¬，看来还是要多练习 (ง •̀</em>•́)ง</p>
<p>End~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;按顺序求出表达式的值&quot;&gt;&lt;a href=&quot;#按顺序求出表达式的值&quot; class=&quot;headerlink&quot; title=&quot;按顺序求出表达式的值&quot;&gt;&lt;/a&gt;按顺序求出表达式的值&lt;/h2&gt;&lt;p&gt;今天碰到一个题目：&lt;br&gt;&lt;strong&gt;题目描述：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;常规的表达式求值，我们都会根据计算的优先级来计算， 比如&lt;code&gt;*&lt;/code&gt;、&lt;code&gt;/&lt;/code&gt;的优先级就高于&lt;code&gt;+&lt;/code&gt;、&lt;code&gt;-&lt;/code&gt;。但是小易所生活的世界的表达式规则很简单，从左往右依次计算即可，而且小易所在的世界没有除法(心想：他们的世界是有多傻→_→)，意味着表达式中没有&lt;code&gt;/&lt;/code&gt;，只有(&lt;code&gt;+&lt;/code&gt;,&lt;code&gt;-&lt;/code&gt;和&lt;code&gt;*&lt;/code&gt;)。现给出一个表达式，需要你帮忙计算出小易所在的世界这个表达式的值为多少。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入描述：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入为一行字符串，即一个表达式。其中运算符只有&lt;code&gt;+&lt;/code&gt;,&lt;code&gt;-&lt;/code&gt;和&lt;code&gt;*&lt;/code&gt;。参与计算的数字只有0-9。&lt;br&gt;保证表达式是合法的，排列规则如样例所示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;输出描述&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输出一个数，即表达式的值&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="C++" scheme="https://felon03.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://felon03.github.io/tags/C/"/>
    
      <category term="String" scheme="https://felon03.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Python生成词云</title>
    <link href="https://felon03.github.io/2017/03/25/Python%E7%94%9F%E6%88%90%E8%AF%8D%E4%BA%91/"/>
    <id>https://felon03.github.io/2017/03/25/Python生成词云/</id>
    <published>2017-03-25T07:02:21.000Z</published>
    <updated>2017-03-25T08:02:58.361Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/imagesource/17-03-25-1.png" alt="wordcloud"></p>
<h2 id="Python如何生成词云"><a href="#Python如何生成词云" class="headerlink" title="Python如何生成词云"></a>Python如何生成词云</h2><p>最近看到词云这东西，感觉挺酷眩，就想自己实现以下:P<br>通过度娘发现可以用Python库来生成词云， So Let’s go!<br><a id="more"></a></p>
<h3 id="用到的库"><a href="#用到的库" class="headerlink" title="用到的库"></a>用到的库</h3><h4 id="WorldCloud"><a href="#WorldCloud" class="headerlink" title="WorldCloud"></a>WorldCloud</h4><ul>
<li>官网: <a href="https://amueller.github.io/word_cloud" target="_blank" rel="external">https://amueller.github.io/word_cloud</a></li>
<li>github: <a href="https://github.com/amueller/word_cloud" target="_blank" rel="external">https://github.com/amueller/word_cloud</a> </li>
</ul>
<h3 id="安装WordCloud"><a href="#安装WordCloud" class="headerlink" title="安装WordCloud"></a>安装WordCloud</h3><h4 id="通过PIP安装"><a href="#通过PIP安装" class="headerlink" title="通过PIP安装"></a>通过PIP安装</h4><pre><code>pip install wordcloud
</code></pre><h4 id="下载WHL包安装"><a href="#下载WHL包安装" class="headerlink" title="下载WHL包安装"></a>下载WHL包安装</h4><p>当然可能通过PIP会安装出错，我们可以下<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#wordcloud" target="_blank" rel="external">WHL包</a>手动安装</p>
<p>下载完成后，再使用PIP命令安装：</p>
<pre><code>pip install yourfilepath\wordcloud‑1.3.1‑cp36‑cp36m‑win_amd64.whl
</code></pre><p>其中， yourfilepath是你电脑中whl文件存放的位置，后面的包名为你所下载的whl包，我下的是<code>wordcloud‑1.3.1‑cp36‑cp36m‑win_amd64.whl</code>。</p>
<h3 id="使用WordlCloud"><a href="#使用WordlCloud" class="headerlink" title="使用WordlCloud"></a>使用WordlCloud</h3><p>安装完成后，就可以用了。可以先测试以下是否安装成功：</p>
<pre><code>from wordcould import WordCloud
</code></pre><p>如果没有报错，表示安装成功了。</p>
<h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4><p>下面就是源码部分了:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> scipy.misc omport imread</div><div class="line"></div><div class="line"><span class="comment"># 读入一个文件</span></div><div class="line">text = open(<span class="string">'your text file.txt'</span>, <span class="string">'r'</span>).read()</div><div class="line"><span class="comment"># 读入图片</span></div><div class="line">bg_pic = imread(<span class="string">'your picture.png'</span>)</div><div class="line"><span class="comment"># 配置词云参数</span></div><div class="line">wc = WordCloud(</div><div class="line">    <span class="comment"># 设置背景色,我这里设置为了黑色</span></div><div class="line">    background_color = <span class="string">'black'</span>,</div><div class="line">    <span class="comment"># 设置词云形状，就是之前读入的图片</span></div><div class="line">    mask = bg_pic,</div><div class="line">    <span class="comment"># 设置字体,字体路径要正确，不然会报错，最好和py文件放在一块</span></div><div class="line">    font_path = <span class="string">'Sketch Fine Serif.otf'</span></div><div class="line">)</div><div class="line"><span class="comment"># 生成词云</span></div><div class="line">wordcloud = wc.generate(text)</div><div class="line"><span class="comment"># 显示词云图片</span></div><div class="line">plt.imshow(wordcloud)</div><div class="line">plt.axis(<span class="string">'off'</span>)</div><div class="line">plt.show()</div><div class="line"><span class="comment"># 保存图片</span></div><div class="line">wordcloud.to_file(<span class="string">'wordcloud.jpg'</span>)</div></pre></td></tr></table></figure></p>
<p>生成的词云效果如图:<br><img src="/images/imagesource/17-03-25-2.jpg" alt="my wordcloud"></p>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>其中配置词云参数的时候，有多个参数可选：</p>
<p>Parameters<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font_path : string</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Font path to the font that will be used (OTF or TTF). Defaults to DroidSansMono path on a Linux machine. If you are on another OS or don’t have this font, you need to adjust this path.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">width : int (default=400)</div></pre></td></tr></table></figure>
<blockquote>
<p>Width of the canvas.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">height : int (default=200)</div></pre></td></tr></table></figure>
<blockquote>
<p>Height of canvas</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">prefer_horizontal : float (default=0.90)</div></pre></td></tr></table></figure>
<blockquote>
<p>The ratio of times to try horizontal fitting as opposed to vertical. If prefer_horizontal &lt; 1, the algorithm will try rotating the word if it doesn’t fit. (There is currently no built-in way to get only vertical words.)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mask : nd-array or None (default=None)</div></pre></td></tr></table></figure>
<blockquote>
<p>If not None, gives a binary mask on where to draw words. If mask is not None, width and height will be ignored and the shape of mask will be used instead. All white (#FF or #FFFFFF) entries will be considerd “masked out” while other entries will be free to draw on. [This changed in the most recent version!]</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scale : float (default=1)</div></pre></td></tr></table></figure>
<blockquote>
<p>Scaling between computation and drawing. For large word-cloud images, using scale instead of larger canvas size is significantly faster, but might lead to a coarser fit for the words.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">min_font_size : int (default=4)</div></pre></td></tr></table></figure>
<blockquote>
<p>Smallest font size to use. Will stop when there is no more room in this size.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font_step : int (default=1)</div></pre></td></tr></table></figure>
<blockquote>
<p>Step size for the font. font_step &gt; 1 might speed up computation but give a worse fit.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">max_words : number (default=200)</div></pre></td></tr></table></figure>
<blockquote>
<p>The maximum number of words.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stopwords : set of strings or None</div></pre></td></tr></table></figure>
<blockquote>
<p>The words that will be eliminated. If None, the build-in STOPWORDS list will be used.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">background_color : color value (default=”black”)</div></pre></td></tr></table></figure>
<blockquote>
<p>Background color for the word cloud image.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">max_font_size : int or None (default=None)</div></pre></td></tr></table></figure>
<blockquote>
<p>Maximum font size for the largest word. If None, height of the image is used.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mode : string (default=”RGB”)</div></pre></td></tr></table></figure>
<blockquote>
<p>Transparent background will be generated when mode is “RGBA” and background_color is None.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">relative_scaling : float (default=.5)</div></pre></td></tr></table></figure>
<blockquote>
<p>Importance of relative word frequencies for font-size. With relative_scaling=0, only word-ranks are considered. With relative_scaling=1, a word that is twice as frequent will have twice the size. If you want to consider the word frequencies and not only their rank, relative_scaling around .5 often looks good.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">color_func : callable, default=None</div></pre></td></tr></table></figure>
<blockquote>
<p>Callable with parameters word, font_size, position, orientation, font_path, random_state that returns a PIL color for each word. Overwrites “colormap”. See colormap for specifying a matplotlib colormap instead.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">regexp : string or None (optional)</div></pre></td></tr></table></figure>
<blockquote>
<p>Regular expression to split the input text into tokens in process_text. If None is specified, r”\w[\w’]+” is used.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">collocations : bool, default=True</div></pre></td></tr></table></figure>
<blockquote>
<p>Whether to include collocations (bigrams) of two words.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">colormap : string or matplotlib colormap, default=”viridis”</div></pre></td></tr></table></figure>
<blockquote>
<p>Matplotlib colormap to randomly draw colors from for each word. Ignored if “color_func” is specified.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">normalize_plurals : bool, default=True</div></pre></td></tr></table></figure>
<blockquote>
<p>Whether to remove trailing ‘s’ from words. If True and a word appears with and without a trailing ‘s’, the one with trailing ‘s’ is removed and its counts are added to the version without trailing ‘s’ – unless the word ends with ‘ss’.</p>
</blockquote>
<p>以上就是所有可以配置的参数，可以根据需要来用。</p>
<p>End~</p>
<hr>
<p>[1]: 图片出处: <a href="https://github.com/amueller/word_cloud" target="_blank" rel="external">https://github.com/amueller/word_cloud</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/imagesource/17-03-25-1.png&quot; alt=&quot;wordcloud&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Python如何生成词云&quot;&gt;&lt;a href=&quot;#Python如何生成词云&quot; class=&quot;headerlink&quot; title=&quot;Python如何生成词云&quot;&gt;&lt;/a&gt;Python如何生成词云&lt;/h2&gt;&lt;p&gt;最近看到词云这东西，感觉挺酷眩，就想自己实现以下:P&lt;br&gt;通过度娘发现可以用Python库来生成词云， So Let’s go!&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https://felon03.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://felon03.github.io/tags/Python/"/>
    
      <category term="词云" scheme="https://felon03.github.io/tags/%E8%AF%8D%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>Python脚本抓取Bing美图</title>
    <link href="https://felon03.github.io/2017/03/23/Python3%E8%84%9A%E6%9C%AC%E6%8A%93%E5%8F%96Bing%E7%BE%8E%E5%9B%BE/"/>
    <id>https://felon03.github.io/2017/03/23/Python3脚本抓取Bing美图/</id>
    <published>2017-03-23T06:26:18.000Z</published>
    <updated>2017-03-31T07:39:09.889Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.dujin.org/sys/bing/1920.php" alt="post_background"></p>
<h1 id="使用Python脚本下载Bing美图"><a href="#使用Python脚本下载Bing美图" class="headerlink" title="使用Python脚本下载Bing美图"></a>使用Python脚本下载Bing美图</h1><p><a href="https://cn.bing.com" target="_blank" rel="external">Bing首页</a>每天都会展示不同的图片，如果每天都去首页下载就比较麻烦了，于是乎想到了用Python脚本来代替，自动保存到图片目录下，省时省力。<br><a id="more"></a></p>
<h2 id="Bing美图API"><a href="#Bing美图API" class="headerlink" title="Bing美图API"></a>Bing美图API</h2><p>Bing官方有两个API：<br>xml版： <a href="http://cn.bing.com/HPImageArchive.aspx?idx=0&amp;n=1" target="_blank" rel="external">http://cn.bing.com/HPImageArchive.aspx?idx=0&amp;n=1</a><br>json版： <a href="http://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1" target="_blank" rel="external">http://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1</a><br>有了API就可以愉快地抓图了:D</p>
<h2 id="Python抓图"><a href="#Python抓图" class="headerlink" title="Python抓图"></a>Python抓图</h2><p>至于为什么要用Python，前段时间学习了廖大的<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">Python教程</a>,算是跟着把整个教程做完了，就放了一段时间。现在突然想弄个小工具来下Bing美图，嗯，就是它了！</p>
<h2 id="用到的库"><a href="#用到的库" class="headerlink" title="用到的库"></a>用到的库</h2><ul>
<li><a href="http://cn.python-requests.org/zh_CN/latest/index.html" target="_blank" rel="external">Requests</a></li>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" target="_blank" rel="external">Beautiful Soup</a></li>
</ul>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadPic</span><span class="params">(file_name, picurl)</span>:</span></div><div class="line">	<span class="comment"># 判断文件夹是否存在，如果不存在就新建</span></div><div class="line">	<span class="keyword">if</span> os.path.exists(<span class="string">r'C:\Users\Freed\Pictures\bingwallpaper'</span>):</div><div class="line">		print(<span class="string">'Find dir already...'</span>)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		print(<span class="string">'Dir not found, makdir...'</span>)</div><div class="line">		os.mkdir(<span class="string">r'C:\Users\Freed\Pictures\bingwallpaper'</span>)</div><div class="line">		print(<span class="string">'success...'</span>)</div><div class="line">	<span class="keyword">if</span> os.path.exists(<span class="string">r'c:\users\freed\pictures\bingwallpaper\\'</span> + file_name):</div><div class="line">		print(<span class="string">'downlaod already...'</span>)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		pic = getHtml(picurl)</div><div class="line">		fp = open(<span class="string">r'c:\users\freed\pictures\bingwallpaper\\'</span> + file_name, <span class="string">'wb'</span>)</div><div class="line">		fp.write(pic)</div><div class="line">		fp.close()</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml</span><span class="params">(url)</span>:</span></div><div class="line">	r = requests.get(url)</div><div class="line">	<span class="keyword">return</span> r.content</div><div class="line">url = <span class="string">'http://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1'</span></div><div class="line">json_str = getHtml(url)		<span class="comment"># 得到的是str</span></div><div class="line">json_str = json_str.decode()</div><div class="line">print(type(json_str))</div><div class="line"><span class="comment">#print(json_str)</span></div><div class="line">json_list = json_str.split(<span class="string">','</span>)		<span class="comment"># 得到list</span></div><div class="line"><span class="comment">#print(json_list)</span></div><div class="line">pic_head = <span class="string">'http://s.cn.bing.net'</span></div><div class="line">json_url = <span class="string">''</span></div><div class="line">json_url = json_url.join(json_list[<span class="number">3</span>])</div><div class="line">picurl = json_url[<span class="number">7</span>:<span class="number">-1</span>]</div><div class="line">picurl = pic_head + picurl</div><div class="line">print(picurl)</div><div class="line"><span class="comment"># 设置图片名称</span></div><div class="line">file_name = str(<span class="string">"BingWallPaper-"</span> + time.strftime(<span class="string">'%Y-%m-%d'</span>,time.localtime(time.time())) + <span class="string">'.jpg'</span>)</div><div class="line"></div><div class="line">downloadPic(file_name, picurl)</div></pre></td></tr></table></figure>
<p>用Pthon命令运行文件即可。<br>到此大功告成!  :D</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.dujin.org/sys/bing/1920.php&quot; alt=&quot;post_background&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;使用Python脚本下载Bing美图&quot;&gt;&lt;a href=&quot;#使用Python脚本下载Bing美图&quot; class=&quot;headerlink&quot; title=&quot;使用Python脚本下载Bing美图&quot;&gt;&lt;/a&gt;使用Python脚本下载Bing美图&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://cn.bing.com&quot;&gt;Bing首页&lt;/a&gt;每天都会展示不同的图片，如果每天都去首页下载就比较麻烦了，于是乎想到了用Python脚本来代替，自动保存到图片目录下，省时省力。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https://felon03.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://felon03.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://felon03.github.io/2017/03/21/hello-world/"/>
    <id>https://felon03.github.io/2017/03/21/hello-world/</id>
    <published>2017-03-21T13:41:15.653Z</published>
    <updated>2017-03-24T10:18:57.240Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/background.jpg" alt="background"><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/background.jpg&quot; alt=&quot;background&quot;&gt;&lt;br&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="helloworld" scheme="https://felon03.github.io/categories/helloworld/"/>
    
    
      <category term="helloworld" scheme="https://felon03.github.io/tags/helloworld/"/>
    
  </entry>
  
</feed>
