<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FreedomLy</title>
  <subtitle>Welcome to my blog. &lt;3</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-25T07:30:54.687Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>FreedomLy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python生成词云</title>
    <link href="http://yoursite.com/2017/03/25/Python%E7%94%9F%E6%88%90%E8%AF%8D%E4%BA%91/"/>
    <id>http://yoursite.com/2017/03/25/Python生成词云/</id>
    <published>2017-03-25T07:02:21.000Z</published>
    <updated>2017-03-25T07:30:54.687Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/imagesource/17-03-25-1.png" alt="wordcloud"></p>
<h2 id="Python如何生成词云"><a href="#Python如何生成词云" class="headerlink" title="Python如何生成词云"></a>Python如何生成词云</h2><p>最近看到词云这东西，感觉挺酷眩，就想自己实现以下:P<br>通过度娘发现可以用Python库来生成词云， So Let’s go!<br><a id="more"></a></p>
<h3 id="用到的库"><a href="#用到的库" class="headerlink" title="用到的库"></a>用到的库</h3><p><a href="https://amueller.github.io/word_cloud/" target="_blank" rel="external">WorldCloud</a><br>官网: <a href="https://amueller.github.io/word_cloud" target="_blank" rel="external">https://amueller.github.io/word_cloud</a><br>github: <a href="https://github.com/amueller/word_cloud" target="_blank" rel="external">https://github.com/amueller/word_cloud</a> </p>
<h3 id="安装WordCloud"><a href="#安装WordCloud" class="headerlink" title="安装WordCloud"></a>安装WordCloud</h3><h4 id="通过PIP安装"><a href="#通过PIP安装" class="headerlink" title="通过PIP安装"></a>通过PIP安装</h4><pre><code>pip install wordcloud
</code></pre><h4 id="下载WHL包安装"><a href="#下载WHL包安装" class="headerlink" title="下载WHL包安装"></a>下载WHL包安装</h4><p>当然可能通过PIP会安装出错，我们可以下<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#wordcloud" target="_blank" rel="external">WHL包</a>手动安装</p>
<p>下载完成后，再使用PIP命令安装：</p>
<pre><code>pip install yourfilepath\wordcloud‑1.3.1‑cp36‑cp36m‑win_amd64.whl
</code></pre><p>其中， yourfilepath是你电脑中whl文件存放的位置，后面的包名为你所下载的whl包，我下的是<code>wordcloud‑1.3.1‑cp36‑cp36m‑win_amd64.whl</code>。</p>
<h3 id="使用WordlCloud"><a href="#使用WordlCloud" class="headerlink" title="使用WordlCloud"></a>使用WordlCloud</h3><p>安装完成后，就可以用了。可以先测试以下是否安装成功：</p>
<pre><code>from wordcould import WordCloud
</code></pre><p>如果没有报错，表示安装成功了。</p>
<h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4><p>下面就是源码部分了:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> scipy.misc omport imread</div><div class="line"></div><div class="line"><span class="comment"># 读入一个文件</span></div><div class="line">text = open(<span class="string">'your text file.txt'</span>, <span class="string">'r'</span>).read()</div><div class="line"><span class="comment"># 读入图片</span></div><div class="line">bg_pic = imread(<span class="string">'your picture.png'</span>)</div><div class="line"><span class="comment"># 配置词云参数</span></div><div class="line">wc = WordCloud(</div><div class="line">    <span class="comment"># 设置背景色,我这里设置为了黑色</span></div><div class="line">    background_color = <span class="string">'black'</span>,</div><div class="line">    <span class="comment"># 设置词云形状，就是之前读入的图片</span></div><div class="line">    mask = bg_pic,</div><div class="line">    <span class="comment"># 设置字体,字体路径要正确，不然会报错，最好和py文件放在一块</span></div><div class="line">    font_path = <span class="string">'Sketch Fine Serif.otf'</span></div><div class="line">)</div><div class="line"><span class="comment"># 生成词云</span></div><div class="line">wordcloud = wc.generate(text)</div><div class="line"><span class="comment"># 显示词云图片</span></div><div class="line">plt.imshow(wordcloud)</div><div class="line">plt.axis(<span class="string">'off'</span>)</div><div class="line">plt.show()</div><div class="line"><span class="comment"># 保存图片</span></div><div class="line">wordcloud.to_file(<span class="string">'wordcloud.jpg'</span>)</div></pre></td></tr></table></figure></p>
<p>生成的词云效果如图:<br><img src="/images/imagesource/17-03-25-2.jpg" alt="my wordcloud"></p>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>其中配置词云参数的时候，有多个参数可选：</p>
<p>Parameters<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font_path : string</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Font path to the font that will be used (OTF or TTF). Defaults to DroidSansMono path on a Linux machine. If you are on another OS or don’t have this font, you need to adjust this path.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">width : int (default=400)</div></pre></td></tr></table></figure>
<blockquote>
<p>Width of the canvas.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">height : int (default=200)</div></pre></td></tr></table></figure>
<blockquote>
<p>Height of canvas</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">prefer_horizontal : float (default=0.90)</div></pre></td></tr></table></figure>
<blockquote>
<p>The ratio of times to try horizontal fitting as opposed to vertical. If prefer_horizontal &lt; 1, the algorithm will try rotating the word if it doesn’t fit. (There is currently no built-in way to get only vertical words.)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mask : nd-array or None (default=None)</div></pre></td></tr></table></figure>
<blockquote>
<p>If not None, gives a binary mask on where to draw words. If mask is not None, width and height will be ignored and the shape of mask will be used instead. All white (#FF or #FFFFFF) entries will be considerd “masked out” while other entries will be free to draw on. [This changed in the most recent version!]</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scale : float (default=1)</div></pre></td></tr></table></figure>
<blockquote>
<p>Scaling between computation and drawing. For large word-cloud images, using scale instead of larger canvas size is significantly faster, but might lead to a coarser fit for the words.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">min_font_size : int (default=4)</div></pre></td></tr></table></figure>
<blockquote>
<p>Smallest font size to use. Will stop when there is no more room in this size.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font_step : int (default=1)</div></pre></td></tr></table></figure>
<blockquote>
<p>Step size for the font. font_step &gt; 1 might speed up computation but give a worse fit.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">max_words : number (default=200)</div></pre></td></tr></table></figure>
<blockquote>
<p>The maximum number of words.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stopwords : set of strings or None</div></pre></td></tr></table></figure>
<blockquote>
<p>The words that will be eliminated. If None, the build-in STOPWORDS list will be used.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">background_color : color value (default=”black”)</div></pre></td></tr></table></figure>
<blockquote>
<p>Background color for the word cloud image.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">max_font_size : int or None (default=None)</div></pre></td></tr></table></figure>
<blockquote>
<p>Maximum font size for the largest word. If None, height of the image is used.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mode : string (default=”RGB”)</div></pre></td></tr></table></figure>
<blockquote>
<p>Transparent background will be generated when mode is “RGBA” and background_color is None.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">relative_scaling : float (default=.5)</div></pre></td></tr></table></figure>
<blockquote>
<p>Importance of relative word frequencies for font-size. With relative_scaling=0, only word-ranks are considered. With relative_scaling=1, a word that is twice as frequent will have twice the size. If you want to consider the word frequencies and not only their rank, relative_scaling around .5 often looks good.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">color_func : callable, default=None</div></pre></td></tr></table></figure>
<blockquote>
<p>Callable with parameters word, font_size, position, orientation, font_path, random_state that returns a PIL color for each word. Overwrites “colormap”. See colormap for specifying a matplotlib colormap instead.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">regexp : string or None (optional)</div></pre></td></tr></table></figure>
<blockquote>
<p>Regular expression to split the input text into tokens in process_text. If None is specified, r”\w[\w’]+” is used.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">collocations : bool, default=True</div></pre></td></tr></table></figure>
<blockquote>
<p>Whether to include collocations (bigrams) of two words.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">colormap : string or matplotlib colormap, default=”viridis”</div></pre></td></tr></table></figure>
<blockquote>
<p>Matplotlib colormap to randomly draw colors from for each word. Ignored if “color_func” is specified.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">normalize_plurals : bool, default=True</div></pre></td></tr></table></figure>
<blockquote>
<p>Whether to remove trailing ‘s’ from words. If True and a word appears with and without a trailing ‘s’, the one with trailing ‘s’ is removed and its counts are added to the version without trailing ‘s’ – unless the word ends with ‘ss’.</p>
</blockquote>
<p>以上就是所有可以配置的参数，可以根据需要来用。</p>
<p>End~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/imagesource/17-03-25-1.png&quot; alt=&quot;wordcloud&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Python如何生成词云&quot;&gt;&lt;a href=&quot;#Python如何生成词云&quot; class=&quot;headerlink&quot; title=&quot;Python如何生成词云&quot;&gt;&lt;/a&gt;Python如何生成词云&lt;/h2&gt;&lt;p&gt;最近看到词云这东西，感觉挺酷眩，就想自己实现以下:P&lt;br&gt;通过度娘发现可以用Python库来生成词云， So Let’s go!&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="词云" scheme="http://yoursite.com/tags/%E8%AF%8D%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>Python脚本抓取Bing美图</title>
    <link href="http://yoursite.com/2017/03/23/Python3%E8%84%9A%E6%9C%AC%E6%8A%93%E5%8F%96Bing%E7%BE%8E%E5%9B%BE/"/>
    <id>http://yoursite.com/2017/03/23/Python3脚本抓取Bing美图/</id>
    <published>2017-03-23T06:26:18.000Z</published>
    <updated>2017-03-24T11:34:12.744Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://s.cn.bing.net/az/hprichbg/rb/NoronhaTwoBrothers_ZH-CN10642407566_1920x1080.jpg" alt="post_background"></p>
<h1 id="使用Python脚本下载Bing美图"><a href="#使用Python脚本下载Bing美图" class="headerlink" title="使用Python脚本下载Bing美图"></a>使用Python脚本下载Bing美图</h1><p><a href="https://cn.bing.com" target="_blank" rel="external">Bing首页</a>每天都会展示不同的图片，如果每天都去首页下载就比较麻烦了，于是乎想到了用Python脚本来代替，自动保存到图片目录下，省时省力。<br><a id="more"></a></p>
<h2 id="Bing美图API"><a href="#Bing美图API" class="headerlink" title="Bing美图API"></a>Bing美图API</h2><p>Bing官方有两个API：<br>xml版： <a href="http://cn.bing.com/HPImageArchive.aspx?idx=0&amp;n=1" target="_blank" rel="external">http://cn.bing.com/HPImageArchive.aspx?idx=0&amp;n=1</a><br>json版： <a href="http://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1" target="_blank" rel="external">http://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1</a><br>有了API就可以愉快地抓图了:D</p>
<h2 id="Python抓图"><a href="#Python抓图" class="headerlink" title="Python抓图"></a>Python抓图</h2><p>至于为什么要用Python，前段时间学习了廖大的<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">Python教程</a>,算是跟着把整个教程做完了，就放了一段时间。现在突然想弄个小工具来下Bing美图，嗯，就是它了！</p>
<h2 id="用到的库"><a href="#用到的库" class="headerlink" title="用到的库"></a>用到的库</h2><ul>
<li><a href="http://cn.python-requests.org/zh_CN/latest/index.html" target="_blank" rel="external">Requests</a></li>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" target="_blank" rel="external">Beautiful Soup</a></li>
</ul>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadPic</span><span class="params">(file_name, picurl)</span>:</span></div><div class="line">	<span class="comment"># 判断文件夹是否存在，如果不存在就新建</span></div><div class="line">	<span class="keyword">if</span> os.path.exists(<span class="string">r'C:\Users\Freed\Pictures\bingwallpaper'</span>):</div><div class="line">		print(<span class="string">'Find dir already...'</span>)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		print(<span class="string">'Dir not found, makdir...'</span>)</div><div class="line">		os.mkdir(<span class="string">r'C:\Users\Freed\Pictures\bingwallpaper'</span>)</div><div class="line">		print(<span class="string">'success...'</span>)</div><div class="line">	<span class="keyword">if</span> os.path.exists(<span class="string">r'c:\users\freed\pictures\bingwallpaper\\'</span> + file_name):</div><div class="line">		print(<span class="string">'downlaod already...'</span>)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		pic = getHtml(picurl)</div><div class="line">		fp = open(<span class="string">r'c:\users\freed\pictures\bingwallpaper\\'</span> + file_name, <span class="string">'wb'</span>)</div><div class="line">		fp.write(pic)</div><div class="line">		fp.close()</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml</span><span class="params">(url)</span>:</span></div><div class="line">	r = requests.get(url)</div><div class="line">	<span class="keyword">return</span> r.content</div><div class="line">url = <span class="string">'http://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1'</span></div><div class="line">json_str = getHtml(url)		<span class="comment"># 得到的是str</span></div><div class="line">json_str = json_str.decode()</div><div class="line">print(type(json_str))</div><div class="line"><span class="comment">#print(json_str)</span></div><div class="line">json_list = json_str.split(<span class="string">','</span>)		<span class="comment"># 得到list</span></div><div class="line"><span class="comment">#print(json_list)</span></div><div class="line">pic_head = <span class="string">'http://s.cn.bing.net'</span></div><div class="line">json_url = <span class="string">''</span></div><div class="line">json_url = json_url.join(json_list[<span class="number">3</span>])</div><div class="line">picurl = json_url[<span class="number">7</span>:<span class="number">-1</span>]</div><div class="line">picurl = pic_head + picurl</div><div class="line">print(picurl)</div><div class="line"><span class="comment"># 设置图片名称</span></div><div class="line">file_name = str(<span class="string">"BingWallPaper-"</span> + time.strftime(<span class="string">'%Y-%m-%d'</span>,time.localtime(time.time())) + <span class="string">'.jpg'</span>)</div><div class="line"></div><div class="line">downloadPic(file_name, picurl)</div></pre></td></tr></table></figure>
<p>用Pthon命令运行文件即可。<br>到此大功告成!  :D</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://s.cn.bing.net/az/hprichbg/rb/NoronhaTwoBrothers_ZH-CN10642407566_1920x1080.jpg&quot; alt=&quot;post_background&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;使用Python脚本下载Bing美图&quot;&gt;&lt;a href=&quot;#使用Python脚本下载Bing美图&quot; class=&quot;headerlink&quot; title=&quot;使用Python脚本下载Bing美图&quot;&gt;&lt;/a&gt;使用Python脚本下载Bing美图&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://cn.bing.com&quot;&gt;Bing首页&lt;/a&gt;每天都会展示不同的图片，如果每天都去首页下载就比较麻烦了，于是乎想到了用Python脚本来代替，自动保存到图片目录下，省时省力。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/03/21/hello-world/"/>
    <id>http://yoursite.com/2017/03/21/hello-world/</id>
    <published>2017-03-21T13:41:15.653Z</published>
    <updated>2017-03-24T10:18:57.240Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/background.jpg" alt="background"><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/background.jpg&quot; alt=&quot;background&quot;&gt;&lt;br&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="helloworld" scheme="http://yoursite.com/categories/helloworld/"/>
    
    
      <category term="helloworld" scheme="http://yoursite.com/tags/helloworld/"/>
    
  </entry>
  
</feed>
